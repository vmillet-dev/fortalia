 version: 2.1

orbs:
  win: circleci/windows@5.1.0
  github-cli: circleci/github-cli@2.7.2

jobs:
  build-unreal-project:
    executor:
      name: win/server-2022
      size: large
      shell: powershell.exe
    steps:
      - checkout

      - run:
          name: Docker Login
          command: echo $env:DOCKER_PASSWORD | docker login -u $env:DOCKER_USERNAME --password-stdin  
      - run:
          name: Pull Unreal Engine image
          no_output_timeout: 40m
          command: docker pull $env:UE5_DOCKER_IMAGE
      
      - run:
          name: Build and Cook UE Project
          command: |
            $projectPath = "C:\$env:PROJECT_NAME"
            $checkoutPath = $PWD.Path
            
            docker run --rm -v "${checkoutPath}:${projectPath}" $env:UE5_DOCKER_IMAGE `
              Engine\Build\BatchFiles\RunUAT.bat BuildCookRun `
              -project="${projectPath}\$env:PROJECT_NAME.uproject" `
              -noP4 `
              -platform=Win64 `
              -clientconfig=Shipping `
              -build `
              -cook `
              -stage `
              -package `
              -pak `
              -compressed `
              -archive `
              -archivedirectory="${projectPath}\Build" `
              -nodebuginfo `
              -encryptinifiles
      
      - run:
          name: Zip Build Output
          command: |
            $buildPath = "Build\Windows"
            $zipPath = "Build\$env:PROJECT_NAME-Windows.zip"
            
            Write-Host "Compressing build output from $buildPath"
            
            if (Test-Path $buildPath) {
              Compress-Archive -Path "$buildPath\*" -DestinationPath $zipPath -Force
              Write-Host "Build archived to $zipPath"
            } else {
              Write-Error "Build path $buildPath not found"
              exit 1
            }
      
      - persist_to_workspace:
          root: Build
          paths:
            - "*.zip"
      
      - store_artifacts:
          path: "Build/$env:PROJECT_NAME-Windows.zip"
          destination: unreal-build

  create-github-release:
    executor:
      name: win/server-2022
      size: medium
      shell: powershell.exe
    steps:
      - checkout
      - attach_workspace:
          at: Build
      
      - github-cli/setup:
          token: GITHUB_TOKEN
      
      - run:
          name: Generate Changelog
          command: |
            # R√©cup√©rer le tag pr√©c√©dent
            $previousTag = git describe --tags --abbrev=0 HEAD^ 2>$null
            if (-not $previousTag) {
              $previousTag = git rev-list --max-parents=0 HEAD
              Write-Host "No previous tag found, using first commit: $previousTag"
            }
            
            $currentTag = $env:CIRCLE_TAG
            Write-Host "Generating changelog from $previousTag to $currentTag"
            
            # R√©cup√©rer les commits
            $commits = git log "$previousTag..$currentTag" --pretty=format:"%H|%s|%an|%ae" --no-merges
            
            # Initialiser les cat√©gories
            $features = @()
            $fixes = @()
            $docs = @()
            $other = @()
            
            # Classifier les commits
            foreach ($commit in $commits) {
              if ([string]::IsNullOrWhiteSpace($commit)) { continue }
              
              $parts = $commit -split '\|'
              $hash = $parts[0].Substring(0, 7)
              $message = $parts[1]
              $author = $parts[2]
              
              $line = "- $message ([$hash](https://github.com/$env:CIRCLE_PROJECT_USERNAME/$env:CIRCLE_PROJECT_REPONAME/commit/$($parts[0])))"
              
              if ($message -match "^feat(\(.*?\))?:") {
                $features += $line
              } elseif ($message -match "^fix(\(.*?\))?:") {
                $fixes += $line
              } elseif ($message -match "^docs(\(.*?\))?:") {
                $docs += $line
              } else {
                $other += $line
              }
            }
            
            # G√©n√©rer le changelog
            $changelog = "# Release $currentTag`n`n"
            
            if ($features.Count -gt 0) {
              $changelog += "## ‚ú® New Features`n`n"
              $changelog += ($features -join "`n") + "`n`n"
            }
            
            if ($fixes.Count -gt 0) {
              $changelog += "## üêõ Bug Fixes`n`n"
              $changelog += ($fixes -join "`n") + "`n`n"
            }
            
            if ($docs.Count -gt 0) {
              $changelog += "## üìö Documentation`n`n"
              $changelog += ($docs -join "`n") + "`n`n"
            }
            
            if ($other.Count -gt 0) {
              $changelog += "## üîß Other Changes`n`n"
              $changelog += ($other -join "`n") + "`n`n"
            }
            
            # Ajouter les contributeurs
            $contributors = git log "$previousTag..$currentTag" --pretty=format:"%an" --no-merges | Sort-Object -Unique
            if ($contributors) {
              $changelog += "## üë• Contributors`n`n"
              $changelog += "Thanks to all contributors:`n"
              foreach ($contributor in $contributors) {
                $changelog += "- $contributor`n"
              }
            }
            
            # Sauvegarder le changelog
            $changelog | Out-File -FilePath "CHANGELOG.md" -Encoding UTF8
            Write-Host "Changelog generated:"
            Get-Content "CHANGELOG.md"
      
      - run:
          name: Create GitHub Release
          command: |
            $tagName = $env:CIRCLE_TAG
            $zipFile = "Build\$env:PROJECT_NAME-Windows.zip"
            
            Write-Host "Creating GitHub release for tag $tagName"
            
            # Cr√©er la release avec le changelog
            gh release create $tagName `
              $zipFile `
              --title "Release $tagName" `
              --notes-file CHANGELOG.md `
              --repo "$env:CIRCLE_PROJECT_USERNAME/$env:CIRCLE_PROJECT_REPONAME"
            
            Write-Host "Release created successfully!"

workflows:
  version: 2
  build-workflow:
    jobs:
      - build-unreal-project:
          filters:
            tags:
              only: /.*/
      
      - create-github-release:
          requires:
            - build-unreal-project
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
